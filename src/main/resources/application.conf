akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "DEBUG"
  stdout-loglevel = "OFF"
  log-dead-letters = off
}

api {
  port = 9000
  port = ${?SERVER_PORT}
  actor-timeout = 60s
  actor-timeout = ${?ACTOR_TIMEOUT}
}

kafka {
  endpoint = "localhost:9092"
  endpoint = ${?KAFKA_ENDPOINT}
  command {
    config = ""
    config = ${?KAFKA_COMMAND_CONFIG}
  }
  admin-client {}
}

kafka-consumer-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 3.0
    parallelism-max = 9
  }
}

api-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 9
  }
}

exporter-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 1
  }
}

akka {
  http {
    server {
      request-timeout = 60s
      request-timeout = ${?AKKA_HTTP_SERVER_REQUEST_TIMEOUT}
      idle-timeout = 60s
      idle-timeout = ${?AKKA_HTTP_SERVER_IDLE_TIMEOUT}
    }
  }
}

metrics {
  cloudwatch {
    enabled = false
    enabled = ${?CLOUDWATCH_ON}
    name = "remora"
    name = ${?CLOUDWATCH_NAME}
    interval_minutes = 1
    interval_minutes = ${?CLOUDWATCH_INTERVAL_MINUTES}
    metric_filter = ""
    metric_filter = ${?CLOUDWATCH_METRIC_FILTER}
  }
  datadog {
    enabled = false
    enabled = ${?DATADOG_ON}
    name = "remora"
    name = ${?DATADOG_NAME}
    interval_minutes = 1
    interval_minutes = ${?DATADOG_INTERVAL_MINUTES}
    host = "localhost"
    host = ${?DATADOG_AGENT_HOST}
    port = 8125
    port = ${?DATADOG_AGENT_PORT}
    tracked_consumer_group = []
    tracked_consumer_group =  ${?DATADOG_CONSUMER_GROUPS}
    remove_tags_from_metric_name = false
    remove_tags_from_metric_name = ${?DATADOG_REMOVE_TAGS_FROM_METRIC_NAME}
  }
  toregistry {
    enabled = false
    enabled = ${?TO_REGISTRY}
    interval_seconds = 20
    interval_seconds = ${?EXPORT_METRICS_INTERVAL_SECONDS}
  }
}
